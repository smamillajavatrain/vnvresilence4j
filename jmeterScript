| **Format**              | **File Extension(s)**  | **Contains**                                       | **Encoding**                                      | **Common Use Cases**                                   | **Notes**                                                         |
| ----------------------- | ---------------------- | -------------------------------------------------- | ------------------------------------------------- | ------------------------------------------------------ | ----------------------------------------------------------------- |
| **PKCS#12**             | `.pfx`, `.p12`         | Private key + public certificate chain (encrypted) | Binary                                            | Windows IIS, Browsers, Java (via import), JMeter, .NET | Requires password; best for distributing both key + cert together |
| **PEM (PKCS#8)**        | `.pem`, `.key`         | Private key only (PKCS#8 format)                   | Base64 (ASCII) with `-----BEGIN PRIVATE KEY-----` | OpenSSL, Apache, NGINX, Linux servers                  | Usually paired with a separate PEM cert file                      |
| **PEM (OpenSSL)**       | `.pem`, `.crt`, `.cer` | Public certificate only                            | Base64 (ASCII) with `-----BEGIN CERTIFICATE-----` | Linux servers, NGINX, Apache, Kubernetes secrets       | Used for trust chain or server certs                              |
| **DER**                 | `.der`, `.cer`         | Public certificate only                            | Binary                                            | Windows, Java truststore                               | Same cert as PEM but in binary form                               |
| **PKCS#7**              | `.p7b`, `.p7c`         | Certificate chain only (no private key)            | Base64 or Binary                                  | Windows, Java truststores                              | Cannot hold private keys, only cert chain                         |
| **Java Keystore (JKS)** | `.jks`                 | Private keys and/or trusted certificates           | Java proprietary                                  | Java applications, Tomcat, older JMeter                | Being replaced by PKCS#12 in modern Java                          |

to Create truststore.jks
hoose PKCS#7 (.p7b) or PEM (OpenSSL) → these formats contain the certificate chain
(Root CA + Intermediate CA), not your private key.

Download it (example: dtcc_chain.p7b).

Convert/import into Java Truststore (truststore.jks)
keytool -import -trustcacerts -alias dtcc_root -file dtcc_chain.p7b \
  -keystore $CERT_DIR/truststore.jks -storepass changeit -storetype JKS

If you downloaded PEM (.crt/.pem):
keytool -import -trustcacerts -alias dtcc_root -file dtcc_chain.pem \
  -keystore $CERT_DIR/truststore.jks -storepass changeit -storetype JKS
Each -alias must be unique per cert. If the .pem or .p7b has multiple certs (Root + Intermediates), import them one by one with different aliases (e.g., dtcc_root, dtcc_intermediate).

Verify contents of truststore:
keytool -list -v -keystore $CERT_DIR/truststore.jks -storepass changeit
You should see trustedCertEntry (not PrivateKeyEntry).

JMeter config
-Djavax.net.ssl.keyStore=$CERT_DIR/prometheus.res.appdev.dtcc.org.pfx \
-Djavax.net.ssl.keyStorePassword=YourPassword \
-Djavax.net.ssl.keyStoreType=PKCS12 \
-Djavax.net.ssl.trustStore=$CERT_DIR/truststore.jks \
-Djavax.net.ssl.trustStorePassword=changeit

setup-jmeter-ssl.sh
#!/bin/bash
# === CONFIGURATION ===
CERT_DIR="$HOME/jmeter-certs"      # change if needed
PFX_FILE="$CERT_DIR/client-cert.pfx"   # downloaded from portal
PFX_PASS="changeit"                    # update with real password
CA_CHAIN="$CERT_DIR/server-chain.p7b"  # downloaded (p7b/pem) from portal
TRUST_PASS="changeit"

mkdir -p "$CERT_DIR"
cd "$CERT_DIR"

echo "== Step 1: Import client PFX into keystore =="
keytool -importkeystore \
  -srckeystore "$PFX_FILE" -srcstoretype PKCS12 -srcstorepass "$PFX_PASS" \
  -destkeystore keystore.p12 -deststoretype PKCS12 -deststorepass "$PFX_PASS"

echo "== Step 2: Create truststore from server CA chain =="

# If file is .p7b, convert first
if [[ "$CA_CHAIN" == *.p7b ]]; then
    echo "Converting .p7b to PEM..."
    openssl pkcs7 -print_certs -in "$CA_CHAIN" -out server-chain.pem
    CA_CHAIN="$CERT_DIR/server-chain.pem"
fi

# Import each certificate into truststore
count=1
while read -r line; do
    if [[ $line == -----BEGIN* ]]; then
        certfile="cert_${count}.crt"
        echo "$line" > "$certfile"
    elif [[ $line == -----END* ]]; then
        echo "$line" >> "$certfile"
        echo "Importing cert $certfile into truststore..."
        keytool -import -noprompt -trustcacerts \
          -alias "ca$count" \
          -file "$certfile" \
          -keystore truststore.jks \
          -storepass "$TRUST_PASS"
        count=$((count+1))
    elif [[ -n $certfile ]]; then
        echo "$line" >> "$certfile"
    fi
done < "$CA_CHAIN"

echo "== Step 3: Verify keystore and truststore =="
keytool -list -v -keystore keystore.p12 -storepass "$PFX_PASS" | grep "Entry type"
keytool -list -v -keystore truststore.jks -storepass "$TRUST_PASS" | grep "Entry type"

echo "== All done! =="
echo "Use these JVM args in JMeter startup:"
echo "-Djavax.net.ssl.keyStore=$CERT_DIR/keystore.p12"
echo "-Djavax.net.ssl.keyStorePassword=$PFX_PASS"
echo "-Djavax.net.ssl.keyStoreType=PKCS12"
echo "-Djavax.net.ssl.trustStore=$CERT_DIR/truststore.jks"
echo "-Djavax.net.ssl.trustStorePassword=$TRUST_PASS"
##################################################################################
##################################################################################

Confirm .pfx password
keytool -list -v -storetype PKCS12 -keystore /apps/res/devtests/certificates/prometheus.res.appdev.dtcc.org.pfx
It will prompt for the password. If the password is wrong, you’ll see the same integrity error.

Re-run the conversion with correct password
keytool -importkeystore \
    -srckeystore /apps/res/devtests/certificates/prometheus.res.appdev.dtcc.org.pfx -srcstoretype PKCS12 \
    -destkeystore /apps/res/devtests/certificates/prometheus.res.appdev.dtcc.org.jks -deststoretype JKS \
    -srcstorepass <correct-pfx-password> -deststorepass Resobserver123
Update the script
Keep Resobserver123 as the new JKS password (can be same as truststore).
Use the correct PFX password only during conversion step.

Re-run JMeter
./runJmeter.sh

Check results in GUI
Open /home/user/testCases/results.jtl in JMeter GUI → “View Results Tree” to confirm handshake success.

which jmeter
Shows the binary path if JMeter is in PATH. whereis jmeter
Shows all locations where jmeter exists. find / -type f -name "jmeter" 2>/dev/null | grep bin
Full filesystem search (can take longer). Look for something like:  /opt/apache-jmeter-5.5/bin/jmeter

Update the script with the full JMeter path 
  jmeter -n -t "$TEST_PLAN" -l "$RESULT_FILE" \  to /opt/apache-jmeter-5.5/bin/jmeter -n -t "$TEST_PLAN" -l "$RESULT_FILE" \

Where to keep runJmeter.sh

Best options:

Keep it in your project folder (e.g., /apps/res/devtests/).

Or keep it in your home folder (/home/user/runJmeter.sh).

####################################################################################
Step 1: Create Truststore from CA certs
keytool -importcert -alias dtcc-root -file "/apps/res/devtests/certificates/DTCC CORP ROOT CA R3.crt" \
    -keystore "/apps/res/devtests/certificates/truststore.jks" -storepass Resobserver123 -noprompt

keytool -importcert -alias dtcc-issuing -file "/apps/res/devtests/certificates/DTCC CORP Issuing CA R3.crt" \
    -keystore "/apps/res/devtests/certificates/truststore.jks" -storepass Resobserver123 -noprompt

Step 2: Convert .pfx into .jks keystore
keytool -importkeystore \
    -srckeystore "/apps/res/devtests/certificates/prometheus.res.appdev.dtcc.org.pfx" -srcstoretype PKCS12 \
    -destkeystore "/apps/res/devtests/certificates/prometheus.res.appdev.dtcc.org.jks" -deststoretype JKS \
    -srcstorepass Resobserver123 -deststorepass Resobserver123
Step 3: Run JMeter with SSL config
jmeter -n -t /apps/res/devtests/testcase/CCW_UCATrades_Demo_DEV_Envi.jmx \
    -l /home/user/testCases/results.jtl \
    -Djavax.net.ssl.keyStore=/apps/res/devtests/certificates/prometheus.res.appdev.dtcc.org.jks \
    -Djavax.net.ssl.keyStorePassword=Resobserver123 \
    -Djavax.net.ssl.keyStoreType=JKS \
    -Djavax.net.ssl.trustStore=/apps/res/devtests/certificates/truststore.jks \
    -Djavax.net.ssl.trustStorePassword=Resobserver123 \
    -Dhttps.protocols=TLSv1.2,TLSv1.3 \
    -Djdk.tls.client.protocols=TLSv1.2,TLSv1.3

chmod +x runJmeter.sh

runJmeter.sh
#!/bin/bash
# ================================
# Run JMeter with SSL Certificates
# Auto-detects JMeter installation
# ================================

# --- Try to locate JMeter binary ---
if command -v jmeter >/dev/null 2>&1; then
    JMETER_BIN=$(command -v jmeter)
elif [ -x "/opt/apache-jmeter-5.5/bin/jmeter" ]; then
    JMETER_BIN="/opt/apache-jmeter-5.5/bin/jmeter"
elif [ -x "/usr/local/apache-jmeter/bin/jmeter" ]; then
    JMETER_BIN="/usr/local/apache-jmeter/bin/jmeter"
else
    echo "ERROR: Could not find JMeter. Please install JMeter and add it to PATH."
    exit 1
fi

echo "Using JMeter binary: $JMETER_BIN"

# --- Paths (update if needed) ---
CERT_DIR="/apps/res/devtests/certificates"
TRUSTSTORE="$CERT_DIR/truststore.jks"
KEYSTORE="$CERT_DIR/prometheus.res.appdev.dtcc.org.jks"
ROOT_CA="$CERT_DIR/DTCC_CORP_ROOT_CA_R3.crt"
ISSUING_CA="$CERT_DIR/DTCC_CORP_Issuing_CA_R3.crt"
TEST_PLAN="/apps/res/devtests/testcase/CCW_UCATrades_Demo_DEV_Envi.jmx"
RESULT_FILE="/apps/res/devtests/testcase/results.jtl"

# --- Password (change if different) ---
STOREPASS="Resobserver123#"

echo "======================================"
echo " Step 1: Creating Truststore"
echo "======================================"
rm -f "$TRUSTSTORE"
keytool -importcert -alias dtcc-root -file "$ROOT_CA" \
    -keystore "$TRUSTSTORE" -storepass "$STOREPASS" -noprompt
keytool -importcert -alias dtcc-issuing -file "$ISSUING_CA" \
    -keystore "$TRUSTSTORE" -storepass "$STOREPASS" -noprompt

echo "======================================"
echo " Step 2: Running JMeter Test"
echo "======================================"
"$JMETER_BIN" -n -t "$TEST_PLAN" -l "$RESULT_FILE" \
    -Djavax.net.ssl.keyStore="$KEYSTORE" \
    -Djavax.net.ssl.keyStorePassword="$STOREPASS" \
    -Djavax.net.ssl.keyStoreType=JKS \
    -Djavax.net.ssl.trustStore="$TRUSTSTORE" \
    -Djavax.net.ssl.trustStorePassword="$STOREPASS" \
    -Dhttps.protocols=TLSv1.2,TLSv1.3 \
    -Djdk.tls.client.protocols=TLSv1.2,TLSv1.3

echo "======================================"
echo " Done! Results saved to $RESULT_FILE"
echo "======================================"
####################################################################################
############################windows batch###########################################
@echo off
REM ================================
REM Run JMeter with SSL Certificates (Windows)
REM ================================

REM --- Try to locate JMeter binary ---
IF EXIST "%JMETER_HOME%\bin\jmeter.bat" (
    SET JMETER_BIN=%JMETER_HOME%\bin\jmeter.bat
) ELSE (
    WHERE jmeter >nul 2>&1
    IF %ERRORLEVEL%==0 (
        FOR /F "delims=" %%i IN ('WHERE jmeter') DO SET JMETER_BIN=%%i
    ) ELSE (
        ECHO ERROR: Could not find JMeter. Please install JMeter and add it to PATH or set JMETER_HOME.
        EXIT /B 1
    )
)

ECHO Using JMeter binary: %JMETER_BIN%

REM --- Paths (update if needed) ---
SET CERT_DIR=C:\apps\res\devtests\certificates
SET TRUSTSTORE=%CERT_DIR%\truststore.jks
SET KEYSTORE=%CERT_DIR%\prometheus.res.appdev.dtcc.org.jks
SET ROOT_CA=%CERT_DIR%\DTCC_CORP_ROOT_CA_R3.crt
SET ISSUING_CA=%CERT_DIR%\DTCC_CORP_Issuing_CA_R3.crt
SET TEST_PLAN=C:\apps\res\devtests\testcase\CCW_UCATrades_Demo_DEV_Envi.jmx
SET RESULT_FILE=C:\apps\res\devtests\testcase\results.jtl

REM --- Password (change if different) ---
SET STOREPASS=Resobserver123#

ECHO ======================================
ECHO Step 1: Creating Truststore
ECHO ======================================
IF EXIST "%TRUSTSTORE%" DEL "%TRUSTSTORE%"

keytool -importcert -alias dtcc-root -file "%ROOT_CA%" -keystore "%TRUSTSTORE%" -storepass "%STOREPASS%" -noprompt
keytool -importcert -alias dtcc-issuing -file "%ISSUING_CA%" -keystore "%TRUSTSTORE%" -storepass "%STOREPASS%" -noprompt

ECHO ======================================
ECHO Step 2: Running JMeter Test
ECHO ======================================
"%JMETER_BIN%" -n -t "%TEST_PLAN%" -l "%RESULT_FILE%" ^
 -Djavax.net.ssl.keyStore="%KEYSTORE%" ^
 -Djavax.net.ssl.keyStorePassword="%STOREPASS%" ^
 -Djavax.net.ssl.keyStoreType=JKS ^
 -Djavax.net.ssl.trustStore="%TRUSTSTORE%" ^
 -Djavax.net.ssl.trustStorePassword="%STOREPASS%" ^
 -Dhttps.protocols=TLSv1.2,TLSv1.3 ^
 -Djdk.tls.client.protocols=TLSv1.2,TLSv1.3

ECHO ======================================
ECHO Done! Results saved to %RESULT_FILE%
ECHO ======================================

pause
######################################################################
CALL "%JMETER_BIN%" -n -t "%TEST_PLAN%" -l "%RESULT_FILE%" -Djavax.net.ssl.keyStore="%KEYSTORE%" -Djavax.net.ssl.keyStorePassword="%STOREPASS%" -Djavax.net.ssl.keyStoreType=JKS -Djavax.net.ssl.trustStore="%TRUSTSTORE%" -Djavax.net.ssl.trustStorePassword="%STOREPASS%" -Dhttps.protocols=TLSv1.2,TLSv1.3 -Djdk.tls.client.protocols=TLSv1.2,TLSv1.3
